name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: macos-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          echo "build-output-dir=${{ github.workspace }}/build-linux" >> "$GITHUB_OUTPUT"
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "build-output-dir=${{ github.workspace }}\\build-windows" >> "$GITHUB_OUTPUT"
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          echo "build-output-dir=${{ github.workspace }}/build-macos" >> "$GITHUB_OUTPUT"
        fi

    - name: Configure CMake on Windows
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cmake -B "%GITHUB_WORKSPACE%\\build-windows" ^
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} ^
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} ^
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ^
        -S "%GITHUB_WORKSPACE%"

    - name: Configure CMake
      if: runner.os != 'Windows'
      run: |
        cmake -B "${{ steps.strings.outputs.build-output-dir }}" \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -S "${{ github.workspace }}"

    - name: Build
      run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}

    - name: List CTest Tests
      working-directory: "${{ steps.strings.outputs.build-output-dir }}"
      run: ctest --show-only

    - name: SocketTest
      working-directory: "${{ steps.strings.outputs.build-output-dir }}/SocketExe"
      run: ctest --build-config ${{ matrix.build_type }} --rerun-failed --output-on-failure
